const responseHelper = require('../Helper/commonHelper');
const taskmodel = require('../model/taskmodel');


function Service() {
    //baseService.call(this);
}

Service.prototype.createtask=function(dbname,task){
    return new Promise(async(resolve,reject)=>{
       
       let taskdata={project_id:task.project_id,task_header:task.task_header,description:task.notes,stage:task.stage};
        let taskres=await taskmodel.createtask(dbname,taskdata);
        console.log(taskres);
        if(taskres.affectedRows>0  ){  
            resolve(responseHelper.generateResponse("Success", taskres));      
        }else{
            resolve(responseHelper.generateError("error",taskres));
        }
    })
    

}
Service.prototype.getalltask=function(dbname){
    return new Promise(async(resolve,reject)=>{
        
        let custres=await taskmodel.getalltask(dbname);
        if(custres.length>0  ){  
            resolve(responseHelper.generateResponse("Success", custres));      
        }else{
            resolve(responseHelper.generateError("error",custres));
        }
    })

}

Service.prototype.getprojectsallpendingtask=function(dbname){
    return new Promise(async(resolve,reject)=>{
        
        let custres=await taskmodel.getprojectsallpendingtask(dbname);
        if(custres.length>0  ){  
            resolve(responseHelper.generateResponse("Success", custres));      
        }else{
            resolve(responseHelper.generateError("error",custres));
        }
    })

}

Service.prototype.isdonestatus=function(dbname,stausdata){
    return new Promise(async(resolve,reject)=>{
        let status={isdone:stausdata.isdone};
        let task_id=stausdata.task_id;
        let custres=await taskmodel.isdonestatus(dbname,status,task_id);
        if(custres.affectedRows>0  ){  
            resolve(responseHelper.generateResponse("Success", custres));      
        }else{
            resolve(responseHelper.generateError("error",custres));
        }
    })

}

Service.prototype.taskstage=function(dbname,stausdata){
    return new Promise(async(resolve,reject)=>{
        let status={stage:stausdata.stage};
        let task_id=stausdata.task_id;
        let taskres=await taskmodel.taskstage(dbname,status,task_id);
        if(taskres.affectedRows>0  ){  
            resolve(responseHelper.generateResponse("Success", taskres));      
        }else{
            resolve(responseHelper.generateError("error",taskres));
        }
    })

}

Service.prototype.getprojecttask=function(dbname,proj_id){
    return new Promise(async(resolve,reject)=>{
        
        let custres=await taskmodel.getprojecttask(dbname,proj_id);
        if(custres.length>0  ){  
            resolve(responseHelper.generateResponse("Success", custres));      
        }else{
            resolve(responseHelper.generateError("error",custres));
        }
    })

}
Service.prototype.makeautotask=function(dbname,proj_id){
    return new Promise(async(resolve,reject)=>{
        let autotask=[{project_id:proj_id,task_header:'Create Project MilesStones',stage:0,isdone:0,autogenerated:1},
        {project_id:proj_id,task_header:'Make Project Documents',stage:0,isdone:0,autogenerated:1}
    ] ;
    console.log("autotask",autotask);  
    let custres
      for(let i=0;i<autotask.length;i++){
         custres=await taskmodel.createtask(dbname,autotask[i]);
      }
        if(custres.affectedRows>0  ){  
            resolve(responseHelper.generateResponse("Success", custres));      
        }else{
            resolve(responseHelper.generateError("error",custres));
        }
    })

}

Service.prototype.deletetask=function(dbname,task_id){
    return new Promise(async(resolve,reject)=>{
      
        let custres=await taskmodel.deletetask(dbname,task_id);
        if(custres.affectedRows>0  ){  
            resolve(responseHelper.generateResponse("Success", custres));      
        }else{
            resolve(responseHelper.generateError("error",custres));
        }
    })
    

}

Service.prototype.getcurruntmonthtask=function(dbname){
    return new Promise(async(resolve,reject)=>{
        
        let custres=await taskmodel.getcurruntmonthtask(dbname);
        if(custres.length>0  ){  
            resolve(responseHelper.generateResponse("Success", custres));      
        }else{
            resolve(responseHelper.generateError("error",custres));
        }
    })

}

Service.prototype.getcurruntyeartask=function(dbname){
    return new Promise(async(resolve,reject)=>{
        
        let custres=await taskmodel.getcurruntyeartask(dbname);
        if(custres.length>0  ){  
            resolve(responseHelper.generateResponse("Success", custres));      
        }else{
            resolve(responseHelper.generateError("error",custres));
        }
    })

}
module.exports = {
    getInst: function () {
        return new Service();
    }
};
